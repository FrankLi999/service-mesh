AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  Generator: 'former2'
Description: ''
Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0e38b48473ea57778'
      InstanceType: 't2.micro'
      KeyName: 'my_ecs'
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tenancy: 'default'
      SubnetId: 'subnet-08d3101feec0e17da'
      EbsOptimized: false
      SecurityGroupIds:
        - 'sg-0e73dfed1e85cb46e'
      SourceDestCheck: true
      BlockDeviceMappings:
        - DeviceName: '/dev/xvda'
          Ebs:
            Encrypted: false
            VolumeSize: 8
            SnapshotId: 'snap-0ed4f88be6558a32a'
            VolumeType: 'gp2'
            DeleteOnTermination: true
      HibernationOptions:
        Configured: false

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: 'default'
      ClusterSettings:
        - Name: 'containerInsights'
          Value: 'disabled'

  RDSDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: 'wcmbpm'
      AllocatedStorage: 20
      DBInstanceClass: 'db.t2.micro'
      Engine: 'mysql'
      MasterUsername: 'admin'
      MasterUserPassword: 'REPLACEME'
      PreferredBackupWindow: '07:30-08:00'
      BackupRetentionPeriod: 7
      AvailabilityZone: !Sub '${AWS::Region}b'
      PreferredMaintenanceWindow: 'mon:06:04-mon:06:34'
      MultiAZ: false
      EngineVersion: '5.7.22'
      AutoMinorVersionUpgrade: true
      LicenseModel: 'general-public-license'
      PubliclyAccessible: true
      StorageType: 'gp2'
      Port: 3306
      StorageEncrypted: false
      CopyTagsToSnapshot: true
      MonitoringInterval: 0
      EnableIAMDatabaseAuthentication: false
      EnablePerformanceInsights: false
      DeletionProtection: false
      DBSubnetGroupName: !Sub '${ECSCluster}-vpc-0e12e822c1e5549cf'
      VPCSecurityGroups:
        - 'sg-06b6268a569621a85'
      MaxAllocatedStorage: 1000
      DBParameterGroupName: !Sub '${ECSCluster}.mysql5.7'
      OptionGroupName: !Sub '${ECSCluster}:mysql-5-7'
      CACertificateIdentifier: 'rds-ca-2019'

  RDSDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Created from the RDS Management Console'
      DBSubnetGroupName: !Sub '${ECSCluster}-vpc-0e12e822c1e5549cf'
      SubnetIds:
        - 'subnet-08d3101feec0e17da'
        - 'subnet-0c86eeb5d3ab2e031'

  RDSDBSecurityGroup:
    Type: 'AWS::RDS::DBSecurityGroup'
    Properties:
      GroupDescription: !Ref ECSCluster

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: '2020-02-23T21:47:44.823Z'
      GroupName: 'ws-cur-1498'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 8100
          IpProtocol: 'tcp'
          ToPort: 8100
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'load-balancer-wizard-1 created on 2020-02-23T17:50:36.218-05:00'
      GroupName: 'my-service-lb-sg'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
        - CidrIpv6: '::/0'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup3:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: '2020-02-23T21:54:13.567Z'
      GroupName: 'ws-cur-4246'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 8100
          IpProtocol: 'tcp'
          ToPort: 8100
        - CidrIpv6: '::/0'
          Description: ''
          FromPort: 8100
          IpProtocol: 'tcp'
          ToPort: 8100
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup4:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'launch-wizard-1 created 2020-02-23T17:00:57.669-05:00'
      GroupName: 'launch-wizard-1'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 22
          IpProtocol: 'tcp'
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup5:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${ECSCluster} VPC security group'
      GroupName: !Ref ECSCluster
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - SourceSecurityGroupId: 'sg-03edaec6c9ff603a8'
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          IpProtocol: '-1'
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup6:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Created by RDS management console'
      GroupName: 'sg_mysql'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '162.211.184.9/32'
          FromPort: !GetAtt RDSDBInstance.Endpoint.Port
          IpProtocol: 'tcp'
          ToPort: !GetAtt RDSDBInstance.Endpoint.Port
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup7:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: '2020-02-23T21:41:00.306Z'
      GroupName: 'ws-cur-477'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 8100
          IpProtocol: 'tcp'
          ToPort: 8100
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup8:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: '2020-02-23T22:54:20.543Z'
      GroupName: 'ws-cur-6874'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 8000
          IpProtocol: 'tcp'
          ToPort: 8000
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup9:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: '2020-02-23T21:04:34.777Z'
      GroupName: 'ws-cur-2621'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          Description: ''
          FromPort: 8000
          IpProtocol: 'tcp'
          ToPort: 8000
        - CidrIpv6: '::/0'
          Description: ''
          FromPort: 8000
          IpProtocol: 'tcp'
          ToPort: 8000
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup10:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: '2020-02-23T21:07:09.230Z'
      GroupName: 'aws-cu-2871'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 8100
          IpProtocol: 'tcp'
          ToPort: 8100
        - CidrIpv6: '::/0'
          Description: ''
          FromPort: 8100
          IpProtocol: 'tcp'
          ToPort: 8100
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  EC2SecurityGroup11:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: '2020-02-23T21:36:03.493Z'
      GroupName: 'ws-cur-3908'
      VpcId: 'vpc-0e12e822c1e5549cf'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: 'tcp'
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 8000
          IpProtocol: 'tcp'
          ToPort: 8000
        - CidrIpv6: '::/0'
          Description: ''
          FromPort: 8000
          IpProtocol: 'tcp'
          ToPort: 8000
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'

  ElasticLoadBalancingV2ListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Priority: '1'
      ListenerArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/my-service-lb/39baed772591d6c0/930c98eb2dcb4690'
      Conditions:
        - Field: 'path-pattern'
          Values:
            - '/api/currency-exchange-microservice/*'
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/currencyexchangeservicetg/1d71df4075d5ad16'
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/currencyexchangeservicetg/1d71df4075d5ad16'
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false

  ElasticLoadBalancingV2ListenerRule2:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Priority: '2'
      ListenerArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/my-service-lb/39baed772591d6c0/930c98eb2dcb4690'
      Conditions:
        - Field: 'path-pattern'
          Values:
            - '/api/currency-conversion-microservice/*'
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/currencyconversiontg/88d30716639bff38'
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/currencyconversiontg/88d30716639bff38'
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false

  ElasticLoadBalancingV2Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/app/my-service-lb/39baed772591d6c0'
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - TargetGroupArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/myservicetg/1e7ac7298d055281'
          Type: 'forward'

  ElasticLoadBalancingV2LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: 'my-service-lb'
      Scheme: 'internet-facing'
      Type: 'application'
      Subnets:
        - 'subnet-08d3101feec0e17da'
        - 'subnet-0c86eeb5d3ab2e031'
      SecurityGroups:
        - !Ref EC2SecurityGroup2
      IpAddressType: 'ipv4'
      LoadBalancerAttributes:
        - Key: 'access_logs.s3.enabled'
          Value: 'false'
        - Key: 'idle_timeout.timeout_seconds'
          Value: '60'
        - Key: 'deletion_protection.enabled'
          Value: 'false'
        - Key: 'routing.http2.enabled'
          Value: 'true'
        - Key: 'routing.http.drop_invalid_header_fields.enabled'
          Value: 'false'

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: 'ws-currency-exchange-service-h2-appmesh'
      Cluster: !GetAtt ECSCluster.Arn
      ServiceRegistries:
        - RegistryArn: !Sub 'arn:aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/srv-yv4x7pmjmrx6kehz'
      DesiredCount: 1
      LaunchType: 'FARGATE'
      PlatformVersion: 'LATEST'
      TaskDefinition: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/aws-currency-exchange-service-h2-xray:3'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - !Ref EC2SecurityGroup11
          Subnets:
            - 'subnet-0c86eeb5d3ab2e031'
            - 'subnet-08d3101feec0e17da'
      SchedulingStrategy: 'REPLICA'

  ECSService2:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: 'ws-currency-conversion-services-appmesh'
      Cluster: !GetAtt ECSCluster.Arn
      ServiceRegistries:
        - RegistryArn: !Sub 'arn:aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/srv-z32i4oh6oq4j4tg2'
      DesiredCount: 1
      LaunchType: 'FARGATE'
      PlatformVersion: 'LATEST'
      TaskDefinition: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/aws-currency-conversion-service-xray:5'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - !Ref EC2SecurityGroup3
          Subnets:
            - 'subnet-0c86eeb5d3ab2e031'
            - 'subnet-08d3101feec0e17da'
      SchedulingStrategy: 'REPLICA'

  ECSService3:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: 'ws-currency-exchange-service-h2-lb'
      Cluster: !GetAtt ECSCluster.Arn
      LoadBalancers:
        - TargetGroupArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/currencyexchangeservicetg/1d71df4075d5ad16'
          ContainerName: 'aws-currency-exchange-service-h2-xray'
          ContainerPort: 8000
      ServiceRegistries:
        - RegistryArn: !Sub 'arn:aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/srv-yv4x7pmjmrx6kehz'
      DesiredCount: 1
      LaunchType: 'FARGATE'
      PlatformVersion: 'LATEST'
      TaskDefinition: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/aws-currency-exchange-service-h2-xray:3'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - !Ref EC2SecurityGroup8
          Subnets:
            - 'subnet-0c86eeb5d3ab2e031'
            - 'subnet-08d3101feec0e17da'
      HealthCheckGracePeriodSeconds: 120
      SchedulingStrategy: 'REPLICA'

  ECSService4:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: 'ws-currency-conversion-service-lb'
      Cluster: !GetAtt ECSCluster.Arn
      LoadBalancers:
        - TargetGroupArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/currencyconversiontg/88d30716639bff38'
          ContainerName: 'aws-currency-conversion-service-xray'
          ContainerPort: 8100
      ServiceRegistries:
        - RegistryArn: !Sub 'arn:aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/srv-z32i4oh6oq4j4tg2'
      DesiredCount: 1
      LaunchType: 'FARGATE'
      PlatformVersion: 'LATEST'
      TaskDefinition: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/aws-currency-conversion-service-xray:5'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - 'sg-031ff400fc9c0987f'
          Subnets:
            - 'subnet-0c86eeb5d3ab2e031'
            - 'subnet-08d3101feec0e17da'
      HealthCheckGracePeriodSeconds: 120
      SchedulingStrategy: 'REPLICA'

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: 'xli9999/aws-currency-exchange-service-h2-xray:0.0.1-SNAPSHOT'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: '/ecs/aws-currency-exchange-service-h2-xray'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs'
          Name: 'aws-currency-exchange-service-h2-xray'
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
              Protocol: 'tcp'
        - Environment:
            - Name: 'APPMESH_VIRTUAL_NODE_NAME'
              Value: 'mesh/my-service-mesh/virtualNode/currency-exchange-service-vn'
            - Name: 'ENABLE_ENVOY_XRAY_TRACING'
              Value: '1'
            - Name: 'ENVOY_LOG_LEVEL'
              Value: 'trace'
          Essential: true
          HealthCheck:
            Command:
              - 'CMD-SHELL'
              - 'curl -s http://localhost:9901/server_info | grep state | grep -q LIVE'
            Interval: 5
            Timeout: 2
            Retries: 3
            StartPeriod: 10
          Image: '840364872350.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-envoy:v1.12.1.0-prod'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: '/ecs/aws-currency-exchange-service-h2-xray'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs'
          Memory: 500
          Name: 'envoy'
          User: '1337'
        - Essential: true
          Image: 'amazon/aws-xray-daemon:1'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: '/ecs/aws-currency-exchange-service-h2-xray'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs'
          Name: 'xray'
      Family: 'aws-currency-exchange-service-h2-xray'
      TaskRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
        - 'FARGATE'
      Cpu: '512'
      Memory: '1024'

  ECSTaskDefinition2:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: 'xli9999/aws-currency-conversion-service-xray:0.0.1-SNAPSHOT'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: '/ecs/aws-currency-conversion-service-xray'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs'
          Name: 'aws-currency-conversion-service-xray'
          PortMappings:
            - ContainerPort: 8100
              HostPort: 8100
              Protocol: 'tcp'
          Secrets:
            - Name: 'CURRENCY_EXCHANGE_URI'
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/dev/aws-currency-conversion-service-xray/CURRENCY_EXCHANGE_URI'
        - Environment:
            - Name: 'APPMESH_VIRTUAL_NODE_NAME'
              Value: 'mesh/my-service-mesh/virtualNode/currency-conversion-services-vn'
            - Name: 'ENABLE_ENVOY_XRAY_TRACING'
              Value: '1'
            - Name: 'ENVOY_LOG_LEVEL'
              Value: 'trace'
          Essential: true
          HealthCheck:
            Command:
              - 'CMD-SHELL'
              - 'curl -s http://localhost:9901/server_info | grep state | grep -q LIVE'
            Interval: 5
            Timeout: 2
            Retries: 3
            StartPeriod: 10
          Image: '840364872350.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-envoy:v1.12.1.0-prod'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: '/ecs/aws-currency-conversion-service-xray'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs'
          Memory: 500
          Name: 'envoy'
          User: '1337'
        - Essential: true
          Image: 'amazon/aws-xray-daemon:1'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: '/ecs/aws-currency-conversion-service-xray'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs'
          Name: 'xray'
          PortMappings:
            - ContainerPort: 2000
              HostPort: 2000
              Protocol: 'udp'
      Family: 'aws-currency-conversion-service-xray'
      TaskRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
        - 'FARGATE'
      Cpu: '512'
      Memory: '1024'

  ApplicationAutoScalingScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService4.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'

  ApplicationAutoScalingScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: 'conversion_service_policy'
      PolicyType: 'TargetTrackingScaling'
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService4.Name}'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: 'ECSServiceAverageCPUUtilization'
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        TargetValue: 70

  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: 'Default parameter group for mysql5.7'
      Family: 'mysql5.7'

  RDSDBParameterGroup2:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: 'Default parameter group for mysql8.0'
      Family: 'mysql8.0'

  RDSOptionGroup:
    Type: 'AWS::RDS::OptionGroup'
    Properties:
      EngineName: 'mysql'
      MajorEngineVersion: '5.7'
      OptionGroupDescription: 'Default option group for mysql 5.7'

  RDSOptionGroup2:
    Type: 'AWS::RDS::OptionGroup'
    Properties:
      EngineName: 'mysql'
      MajorEngineVersion: '8.0'
      OptionGroupDescription: 'Default option group for mysql 8.0'
